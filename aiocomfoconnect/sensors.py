"""Sensor definitions for aiocomfoconnect.

This module defines sensor constants, units, and the Sensor dataclass for use
with the aiocomfoconnect library. It provides a mapping of sensor IDs to their
respective metadata and value transformation functions.

Attributes:
    SENSORS (dict[int, Sensor]): Mapping of sensor IDs to Sensor objects.

Example:
    >>> sensor = SENSORS[16]
    >>> print(sensor.name)
    Device State
"""

from __future__ import annotations

from dataclasses import dataclass
from typing import Callable

from .const import PdoType
from .util import calculate_airflow_constraints

SENSOR_AIRFLOW_CONSTRAINTS: int = 230
SENSOR_ANALOG_INPUT_1: int = 369
SENSOR_ANALOG_INPUT_2: int = 370
SENSOR_ANALOG_INPUT_3: int = 371
SENSOR_ANALOG_INPUT_4: int = 372
SENSOR_AVOIDED_COOLING: int = 216
SENSOR_AVOIDED_COOLING_TOTAL: int = 218
SENSOR_AVOIDED_COOLING_TOTAL_YEAR: int = 217
SENSOR_AVOIDED_HEATING: int = 213
SENSOR_AVOIDED_HEATING_TOTAL: int = 215
SENSOR_AVOIDED_HEATING_TOTAL_YEAR: int = 214
SENSOR_BYPASS_ACTIVATION_STATE: int = 66
SENSOR_BYPASS_OVERRIDE: int = 338
SENSOR_BYPASS_STATE: int = 227
SENSOR_CHANGING_FILTERS: int = 18
SENSOR_COMFOFOND_GHE_PRESENT: int = 419
SENSOR_COMFOFOND_GHE_STATE: int = 418
SENSOR_COMFOFOND_TEMP_GROUND: int = 417
SENSOR_COMFOFOND_TEMP_OUTDOOR: int = 416
SENSOR_COMFORTCONTROL_MODE: int = 225
SENSOR_DAYS_TO_REPLACE_FILTER: int = 192
SENSOR_DEVICE_STATE: int = 16
SENSOR_FAN_EXHAUST_DUTY: int = 117
SENSOR_FAN_EXHAUST_FLOW: int = 119
SENSOR_FAN_EXHAUST_SPEED: int = 121
SENSOR_FAN_MODE_EXHAUST: int = 71
SENSOR_FAN_MODE_EXHAUST_2: int = 55
SENSOR_FAN_MODE_EXHAUST_3: int = 343
SENSOR_FAN_MODE_SUPPLY: int = 70
SENSOR_FAN_MODE_SUPPLY_2: int = 54
SENSOR_FAN_MODE_SUPPLY_3: int = 342
SENSOR_FAN_SPEED_MODE: int = 65
SENSOR_FAN_SPEED_MODE_MODULATED: int = 226
SENSOR_FAN_SUPPLY_DUTY: int = 118
SENSOR_FAN_SUPPLY_FLOW: int = 120
SENSOR_FAN_SUPPLY_SPEED: int = 122
SENSOR_FROSTPROTECTION_UNBALANCE: int = 228
SENSOR_HUMIDITY_AFTER_PREHEATER: int = 293
SENSOR_HUMIDITY_EXHAUST: int = 291
SENSOR_HUMIDITY_EXTRACT: int = 290
SENSOR_HUMIDITY_OUTDOOR: int = 292
SENSOR_HUMIDITY_SUPPLY: int = 294
SENSOR_NEXT_CHANGE_BYPASS: int = 82
SENSOR_NEXT_CHANGE_FAN: int = 81
SENSOR_NEXT_CHANGE_FAN_EXHAUST: int = 87
SENSOR_NEXT_CHANGE_FAN_SUPPLY: int = 86
SENSOR_OPERATING_MODE: int = 56
SENSOR_OPERATING_MODE_2: int = 49
SENSOR_POWER_USAGE: int = 128
SENSOR_POWER_USAGE_TOTAL: int = 130
SENSOR_POWER_USAGE_TOTAL_YEAR: int = 129
SENSOR_PREHEATER_POWER: int = 146
SENSOR_PREHEATER_POWER_TOTAL: int = 145
SENSOR_PREHEATER_POWER_TOTAL_YEAR: int = 144
SENSOR_PROFILE_TEMPERATURE: int = 67
SENSOR_RF_PAIRING_MODE: int = 176
SENSOR_RMOT: int = 209
SENSOR_SEASON_COOLING_ACTIVE: int = 211
SENSOR_SEASON_HEATING_ACTIVE: int = 210
SENSOR_TARGET_TEMPERATURE: int = 212
SENSOR_TEMPERATURE_EXHAUST: int = 275
SENSOR_TEMPERATURE_EXTRACT: int = 274
SENSOR_TEMPERATURE_OUTDOOR: int = 276
SENSOR_TEMPERATURE_SUPPLY: int = 221
SENSOR_TEMPERATURE_OUTDOOR_TBC: int = 220
SENSOR_TEMPERATURE_OUTDOOR_2_TBC: int = 277
SENSOR_TEMPERATURE_SUPPLY_2_TBC: int = 278
SENSOR_UNIT_AIRFLOW: int = 224
SENSOR_UNIT_TEMPERATURE: int = 208
SENSOR_COMFOCOOL_STATE: int = 784
SENSOR_COMFOCOOL_CONDENSOR_TEMP: int = 802
SENSOR_33: int = 33
SENSOR_37: int = 37
SENSOR_53: int = 53
SENSOR_85: int = 85
SENSOR_219: int = 219
SENSOR_321: int = 321
SENSOR_325: int = 325
SENSOR_337: int = 337
SENSOR_341: int = 341
SENSOR_384: int = 384
SENSOR_386: int = 386
SENSOR_400: int = 400
SENSOR_401: int = 401
SENSOR_402: int = 402
SENSOR_785: int = 785

# Unit constants
UNIT_WATT: str = "W"
UNIT_KWH: str = "kWh"
UNIT_VOLT: str = "V"
UNIT_CELSIUS: str = "\u00b0C"
UNIT_PERCENT: str = "%"
UNIT_RPM: str = "rpm"
UNIT_M3H: str = "m\u00b3/h"


@dataclass
class Sensor:
    """Dataclass for a Sensor.

    Attributes:
        name (str): Human-readable name of the sensor.
        unit (str | None): Unit of measurement, or None if unitless.
        id (int): Sensor ID.
        type (int): PDO type for the sensor value.
        value_fn (Callable[[int], object] | None): Optional function to transform the raw value.
    """

    name: str
    unit: str | None
    id: int
    type: int
    value_fn: Callable[[int], object] | None = None


# For more information, see PROTOCOL-PDO.md
SENSORS: dict[int, Sensor] = {
    SENSOR_DEVICE_STATE: Sensor("Device State", None, SENSOR_DEVICE_STATE, PdoType.TYPE_CN_UINT8),
    SENSOR_CHANGING_FILTERS: Sensor("Changing filters", None, SENSOR_CHANGING_FILTERS, PdoType.TYPE_CN_UINT8),
    SENSOR_33: Sensor("sensor_33", None, SENSOR_33, PdoType.TYPE_CN_UINT8),
    SENSOR_37: Sensor("sensor_37", None, SENSOR_37, PdoType.TYPE_CN_UINT8),
    SENSOR_OPERATING_MODE_2: Sensor("Operating Mode", None, SENSOR_OPERATING_MODE_2, PdoType.TYPE_CN_UINT8),
    SENSOR_53: Sensor("sensor_53", None, SENSOR_53, PdoType.TYPE_CN_UINT8),
    SENSOR_FAN_MODE_SUPPLY_2: Sensor("Supply Fan Mode", None, SENSOR_FAN_MODE_SUPPLY_2, PdoType.TYPE_CN_UINT8),
    SENSOR_FAN_MODE_EXHAUST_2: Sensor("Exhaust Fan Mode", None, SENSOR_FAN_MODE_EXHAUST_2, PdoType.TYPE_CN_UINT8),
    SENSOR_OPERATING_MODE: Sensor("Operating Mode", None, SENSOR_OPERATING_MODE, PdoType.TYPE_CN_UINT8),
    SENSOR_FAN_SPEED_MODE: Sensor("Fan Speed", None, SENSOR_FAN_SPEED_MODE, PdoType.TYPE_CN_UINT8),
    SENSOR_BYPASS_ACTIVATION_STATE: Sensor("Bypass Activation State", None, SENSOR_BYPASS_ACTIVATION_STATE, PdoType.TYPE_CN_UINT8),
    SENSOR_PROFILE_TEMPERATURE: Sensor("Temperature Profile Mode", None, SENSOR_PROFILE_TEMPERATURE, PdoType.TYPE_CN_UINT8),
    SENSOR_FAN_MODE_SUPPLY: Sensor("Supply Fan Mode", None, SENSOR_FAN_MODE_SUPPLY, PdoType.TYPE_CN_UINT8),
    SENSOR_FAN_MODE_EXHAUST: Sensor("Exhaust Fan Mode", None, SENSOR_FAN_MODE_EXHAUST, PdoType.TYPE_CN_UINT8),
    SENSOR_NEXT_CHANGE_FAN: Sensor("Fan Speed Next Change", None, SENSOR_NEXT_CHANGE_FAN, PdoType.TYPE_CN_UINT32),
    SENSOR_NEXT_CHANGE_BYPASS: Sensor("Bypass Next Change", None, SENSOR_NEXT_CHANGE_BYPASS, PdoType.TYPE_CN_UINT32),
    SENSOR_85: Sensor("sensor_85", None, SENSOR_85, PdoType.TYPE_CN_UINT32),
    SENSOR_NEXT_CHANGE_FAN_SUPPLY: Sensor("Supply Fan Next Change", None, SENSOR_NEXT_CHANGE_FAN_SUPPLY, PdoType.TYPE_CN_UINT32),
    SENSOR_NEXT_CHANGE_FAN_EXHAUST: Sensor("Exhaust Fan Next Change", None, SENSOR_NEXT_CHANGE_FAN_EXHAUST, PdoType.TYPE_CN_UINT32),
    SENSOR_FAN_EXHAUST_DUTY: Sensor("Exhaust Fan Duty", UNIT_PERCENT, SENSOR_FAN_EXHAUST_DUTY, PdoType.TYPE_CN_UINT8),
    SENSOR_FAN_SUPPLY_DUTY: Sensor("Supply Fan Duty", UNIT_PERCENT, SENSOR_FAN_SUPPLY_DUTY, PdoType.TYPE_CN_UINT8),
    SENSOR_FAN_EXHAUST_FLOW: Sensor("Exhaust Fan Flow", UNIT_M3H, SENSOR_FAN_EXHAUST_FLOW, PdoType.TYPE_CN_UINT16),
    SENSOR_FAN_SUPPLY_FLOW: Sensor("Supply Fan Flow", UNIT_M3H, SENSOR_FAN_SUPPLY_FLOW, PdoType.TYPE_CN_UINT16),
    SENSOR_FAN_EXHAUST_SPEED: Sensor("Exhaust Fan Speed", UNIT_RPM, SENSOR_FAN_EXHAUST_SPEED, PdoType.TYPE_CN_UINT16),
    SENSOR_FAN_SUPPLY_SPEED: Sensor("Supply Fan Speed", UNIT_RPM, SENSOR_FAN_SUPPLY_SPEED, PdoType.TYPE_CN_UINT16),
    SENSOR_POWER_USAGE: Sensor("Power Usage", UNIT_WATT, SENSOR_POWER_USAGE, PdoType.TYPE_CN_UINT16),
    SENSOR_POWER_USAGE_TOTAL_YEAR: Sensor("Power Usage (year)", UNIT_KWH, SENSOR_POWER_USAGE_TOTAL_YEAR, PdoType.TYPE_CN_UINT16),
    SENSOR_POWER_USAGE_TOTAL: Sensor("Power Usage (total)", UNIT_KWH, SENSOR_POWER_USAGE_TOTAL, PdoType.TYPE_CN_UINT16),
    SENSOR_PREHEATER_POWER_TOTAL_YEAR: Sensor("Preheater Power Usage (year)", UNIT_KWH, SENSOR_PREHEATER_POWER_TOTAL_YEAR, PdoType.TYPE_CN_UINT16),
    SENSOR_PREHEATER_POWER_TOTAL: Sensor("Preheater Power Usage (total)", UNIT_KWH, SENSOR_PREHEATER_POWER_TOTAL, PdoType.TYPE_CN_UINT16),
    SENSOR_PREHEATER_POWER: Sensor("Preheater Power Usage", UNIT_WATT, SENSOR_PREHEATER_POWER, PdoType.TYPE_CN_UINT16),
    SENSOR_RF_PAIRING_MODE: Sensor("RF Pairing Mode", None, SENSOR_RF_PAIRING_MODE, PdoType.TYPE_CN_UINT8),
    SENSOR_DAYS_TO_REPLACE_FILTER: Sensor("Days remaining to replace the filter", None, SENSOR_DAYS_TO_REPLACE_FILTER, PdoType.TYPE_CN_UINT16),
    SENSOR_UNIT_TEMPERATURE: Sensor("Device Temperature Unit", None, SENSOR_UNIT_TEMPERATURE, PdoType.TYPE_CN_UINT8, lambda x: "celcius" if x == 0 else "farenheit"),
    SENSOR_RMOT: Sensor("Running Mean Outdoor Temperature (RMOT)", UNIT_CELSIUS, SENSOR_RMOT, PdoType.TYPE_CN_INT16, lambda x: x / 10),
    SENSOR_SEASON_HEATING_ACTIVE: Sensor("Heating Season is active", None, SENSOR_SEASON_HEATING_ACTIVE, PdoType.TYPE_CN_BOOL, bool),
    SENSOR_SEASON_COOLING_ACTIVE: Sensor("Cooling Season is active", None, SENSOR_SEASON_COOLING_ACTIVE, PdoType.TYPE_CN_BOOL, bool),
    SENSOR_TARGET_TEMPERATURE: Sensor("Target Temperature", UNIT_CELSIUS, SENSOR_TARGET_TEMPERATURE, PdoType.TYPE_CN_INT16, lambda x: x / 10),
    SENSOR_AVOIDED_HEATING: Sensor("Avoided Heating Power Usage", UNIT_WATT, SENSOR_AVOIDED_HEATING, PdoType.TYPE_CN_UINT16),
    SENSOR_AVOIDED_HEATING_TOTAL_YEAR: Sensor("Avoided Heating Power Usage (year)", UNIT_KWH, SENSOR_AVOIDED_HEATING_TOTAL_YEAR, PdoType.TYPE_CN_UINT16),
    SENSOR_AVOIDED_HEATING_TOTAL: Sensor("Avoided Heating Power Usage (total)", UNIT_KWH, SENSOR_AVOIDED_HEATING_TOTAL, PdoType.TYPE_CN_UINT16),
    SENSOR_AVOIDED_COOLING: Sensor("Avoided Cooling Power Usage", UNIT_WATT, SENSOR_AVOIDED_COOLING, PdoType.TYPE_CN_UINT16),
    SENSOR_AVOIDED_COOLING_TOTAL_YEAR: Sensor("Avoided Cooling Power Usage (year)", UNIT_KWH, SENSOR_AVOIDED_COOLING_TOTAL_YEAR, PdoType.TYPE_CN_UINT16),
    SENSOR_AVOIDED_COOLING_TOTAL: Sensor("Avoided Cooling Power Usage (total)", UNIT_KWH, SENSOR_AVOIDED_COOLING_TOTAL, PdoType.TYPE_CN_UINT16),
    SENSOR_219: Sensor("sensor_219", None, SENSOR_219, PdoType.TYPE_CN_UINT16),
    SENSOR_TEMPERATURE_OUTDOOR_TBC: Sensor("Outdoor Air Temperature (TBC)", None, SENSOR_TEMPERATURE_OUTDOOR_TBC, PdoType.TYPE_CN_INT16, lambda x: x / 10),
    SENSOR_TEMPERATURE_SUPPLY: Sensor("Supply Air Temperature", UNIT_CELSIUS, SENSOR_TEMPERATURE_SUPPLY, PdoType.TYPE_CN_INT16, lambda x: x / 10),
    SENSOR_UNIT_AIRFLOW: Sensor("Device Airflow Unit", None, SENSOR_UNIT_AIRFLOW, PdoType.TYPE_CN_UINT8, lambda x: "m3ph" if x == 3 else "lps"),
    SENSOR_COMFORTCONTROL_MODE: Sensor("Sensor based ventilation mode", None, SENSOR_COMFORTCONTROL_MODE, PdoType.TYPE_CN_UINT8),
    SENSOR_FAN_SPEED_MODE_MODULATED: Sensor("Fan Speed (modulated)", None, SENSOR_FAN_SPEED_MODE_MODULATED, PdoType.TYPE_CN_UINT16),
    SENSOR_BYPASS_STATE: Sensor("Bypass State", UNIT_PERCENT, SENSOR_BYPASS_STATE, PdoType.TYPE_CN_UINT8),
    SENSOR_FROSTPROTECTION_UNBALANCE: Sensor("frostprotection_unbalance", None, SENSOR_FROSTPROTECTION_UNBALANCE, PdoType.TYPE_CN_UINT8),
    SENSOR_AIRFLOW_CONSTRAINTS: Sensor("Airflow constraints", None, SENSOR_AIRFLOW_CONSTRAINTS, PdoType.TYPE_CN_INT64, calculate_airflow_constraints),
    SENSOR_TEMPERATURE_EXTRACT: Sensor("Extract Air Temperature", UNIT_CELSIUS, SENSOR_TEMPERATURE_EXTRACT, PdoType.TYPE_CN_INT16, lambda x: x / 10),
    SENSOR_TEMPERATURE_EXHAUST: Sensor("Exhaust Air Temperature", UNIT_CELSIUS, SENSOR_TEMPERATURE_EXHAUST, PdoType.TYPE_CN_INT16, lambda x: x / 10),
    SENSOR_TEMPERATURE_OUTDOOR: Sensor("Outdoor Air Temperature", UNIT_CELSIUS, SENSOR_TEMPERATURE_OUTDOOR, PdoType.TYPE_CN_INT16, lambda x: x / 10),
    SENSOR_TEMPERATURE_OUTDOOR_2_TBC: Sensor("Outdoor Air Temperature 2 (TBC)", UNIT_CELSIUS, SENSOR_TEMPERATURE_OUTDOOR_2_TBC, PdoType.TYPE_CN_INT16, lambda x: x / 10),
    SENSOR_TEMPERATURE_SUPPLY_2_TBC: Sensor("Supply Air Temperature 2 (TBC)", UNIT_CELSIUS, SENSOR_TEMPERATURE_SUPPLY_2_TBC, PdoType.TYPE_CN_INT16, lambda x: x / 10),
    SENSOR_HUMIDITY_EXTRACT: Sensor("Extract Air Humidity", UNIT_PERCENT, SENSOR_HUMIDITY_EXTRACT, PdoType.TYPE_CN_UINT8),
    SENSOR_HUMIDITY_EXHAUST: Sensor("Exhaust Air Humidity", UNIT_PERCENT, SENSOR_HUMIDITY_EXHAUST, PdoType.TYPE_CN_UINT8),
    SENSOR_HUMIDITY_OUTDOOR: Sensor("Outdoor Air Humidity", UNIT_PERCENT, SENSOR_HUMIDITY_OUTDOOR, PdoType.TYPE_CN_UINT8),
    SENSOR_HUMIDITY_AFTER_PREHEATER: Sensor("Outdoor Air Humidity (after preheater)", UNIT_PERCENT, SENSOR_HUMIDITY_AFTER_PREHEATER, PdoType.TYPE_CN_UINT8),
    SENSOR_HUMIDITY_SUPPLY: Sensor("Supply Air Humidity", UNIT_PERCENT, SENSOR_HUMIDITY_SUPPLY, PdoType.TYPE_CN_UINT8),
    SENSOR_321: Sensor("sensor_321", None, SENSOR_321, PdoType.TYPE_CN_UINT16),
    SENSOR_325: Sensor("sensor_325", None, SENSOR_325, PdoType.TYPE_CN_UINT16),
    SENSOR_337: Sensor("sensor_337", None, SENSOR_337, PdoType.TYPE_CN_UINT32),
    SENSOR_BYPASS_OVERRIDE: Sensor("Bypass Override", None, SENSOR_BYPASS_OVERRIDE, PdoType.TYPE_CN_UINT32),
    SENSOR_341: Sensor("sensor_341", None, SENSOR_341, PdoType.TYPE_CN_UINT32),
    SENSOR_FAN_MODE_SUPPLY_3: Sensor("Supply Fan Mode", None, SENSOR_FAN_MODE_SUPPLY_3, PdoType.TYPE_CN_UINT32),
    SENSOR_FAN_MODE_EXHAUST_3: Sensor("Exhaust Fan Mode", None, SENSOR_FAN_MODE_EXHAUST_3, PdoType.TYPE_CN_UINT32),
    SENSOR_ANALOG_INPUT_1: Sensor("Analog Input 1", UNIT_VOLT, SENSOR_ANALOG_INPUT_1, PdoType.TYPE_CN_UINT8, lambda x: x / 10),
    SENSOR_ANALOG_INPUT_2: Sensor("Analog Input 2", UNIT_VOLT, SENSOR_ANALOG_INPUT_2, PdoType.TYPE_CN_UINT8, lambda x: x / 10),
    SENSOR_ANALOG_INPUT_3: Sensor("Analog Input 3", UNIT_VOLT, SENSOR_ANALOG_INPUT_3, PdoType.TYPE_CN_UINT8, lambda x: x / 10),
    SENSOR_ANALOG_INPUT_4: Sensor("Analog Input 4", UNIT_VOLT, SENSOR_ANALOG_INPUT_4, PdoType.TYPE_CN_UINT8, lambda x: x / 10),
    SENSOR_384: Sensor("sensor_384", None, SENSOR_384, PdoType.TYPE_CN_INT16, lambda x: x / 10),
    SENSOR_386: Sensor("sensor_386", None, SENSOR_386, PdoType.TYPE_CN_BOOL, bool),
    SENSOR_400: Sensor("sensor_400", None, SENSOR_400, PdoType.TYPE_CN_INT16, lambda x: x / 10),
    SENSOR_401: Sensor("sensor_401", None, SENSOR_401, PdoType.TYPE_CN_UINT8),
    SENSOR_402: Sensor("sensor_402", None, SENSOR_402, PdoType.TYPE_CN_BOOL, bool),
    SENSOR_COMFOFOND_TEMP_OUTDOOR: Sensor("ComfoFond Outdoor Air Temperature", None, SENSOR_COMFOFOND_TEMP_OUTDOOR, PdoType.TYPE_CN_INT16, lambda x: x / 10),
    SENSOR_COMFOFOND_TEMP_GROUND: Sensor("ComfoFond Ground Temperature", None, SENSOR_COMFOFOND_TEMP_GROUND, PdoType.TYPE_CN_INT16, lambda x: x / 10),
    SENSOR_COMFOFOND_GHE_STATE: Sensor("ComfoFond GHE State Percentage", None, SENSOR_COMFOFOND_GHE_STATE, PdoType.TYPE_CN_UINT8),
    SENSOR_COMFOFOND_GHE_PRESENT: Sensor("ComfoFond GHE Present", None, SENSOR_COMFOFOND_GHE_PRESENT, PdoType.TYPE_CN_BOOL, bool),
    SENSOR_COMFOCOOL_STATE: Sensor("ComfoCool State", None, SENSOR_COMFOCOOL_STATE, PdoType.TYPE_CN_UINT8),
    SENSOR_785: Sensor("sensor_785", None, SENSOR_785, PdoType.TYPE_CN_BOOL),
    SENSOR_COMFOCOOL_CONDENSOR_TEMP: Sensor("ComfoCool Condensor Temperature", None, SENSOR_COMFOCOOL_CONDENSOR_TEMP, PdoType.TYPE_CN_INT16, lambda x: x / 10),
}
